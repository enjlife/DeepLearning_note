import tensorflow as tf
import sys, os
sys.path.append(os.pardir)
import tensorflow.contrib.slim as slim

import tflearn
from tflearn.layers.core import  input_data,fully_connected
from  tflearn.layers.conv import conv_2d,max_pool_2d
from tflearn.layers.estimator import regression
import tflearn.datasets.mnist as mnist

# from tensorflow.examples.tutorials.mnist import input_data
import numpy as np
import collections
from operator import itemgetter
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

"""
1.tensorflow的高级封装，slim和tflearn
"""


file_dataset = '/Users/enjlife/learning-deep-learning-from-scratch/tensorflow_note/ch06/MNIST_data'

# def lenets(inputs):
#     inputs = tf.reshape(inputs,[-1,28,28,1])
#     net = slim.conv2d(inputs,32,[5,5],padding='SAME',scope='layer-max-pool')
#     net = slim.max_pool2d(net,2,stride=2,scope='layer2-max-pool')
#     net = slim.conv2d(net,64,[5,5],scope='layers-conv')
#     net = slim.max_pool2d(net,2,stride=2,scope='layer4-max-pool')
#     net = slim.flatten(net,scope='flatten')
#     net = slim.fully_connected(net,500,scope='layer5')
#     net = slim.fully_connected(net,10,scope='output')
#
# def train(mnist):
#     x = tf.placeholder(tf.float32,[None,784],name='x-input')
#     y_ = tf.placeholder(tf.float32,[None,10],name='y-input')
#     y = lenets(x)
#     cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y,labels=tf.argmax(y_,1))
#     loss = tf.reduce_mean(cross_entropy)
#     train_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)
#
#     with tf.Session() as sess:
#         tf.global_variables_initializer().run()
#         for i in range(1000):
#             xs,ys = mnist.train.next_batch(100)
#             _,loss_value = sess.run([train_op,loss],feed_dict={x:xs,y_:ys})
#
#             if i % 1000 ==0:
#                 print('after %d training step(s),loss: %g' %(i,loss_value))
#
# def main(argv=None):
#     mnist = input_data.read_data_sets(file_dataset,one_hot=True)
#     train(mnist)
#
# if __name__ == '__main__':
#     main()

#tflearn 实现LeNet-5模型

trainx,trainy,testx,testy = mnist.load_data(data_dir=file_dataset,one_hot=True)
trainx = trainx.reshape([-1,28,28,1])
testx = testx.reshape([-1,28,28,1])

net = input_data(shape=[None,28,28,1],name='input')  # input_data定义了一个placeholder
net = conv_2d(net,32,5,activation='relu')
net = max_pool_2d(net,2)

net = conv_2d(net,64,5,activation='relu')
net = max_pool_2d(net,2)
net = fully_connected(net,500,activation='relu')
net = fully_connected(net,10,activation='softmax')

net = regression(net,optimizer='sgd',learning_rate=0.01,loss='categorical_crossentropy')
model = tflearn.DNN(net,tensorboard_verbose=0)
model.fit(trainx,trainy,n_epoch=20,validation_set=[testx,testy],show_metric=True)







